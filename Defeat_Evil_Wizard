import random
import re
import math
from abc import ABC, abstractmethod

# MapTile class that holds all the necessary data and methods for an individual tile
class MapTile:
    def __init__(self, y, x, character = None, item = None):
        self.item = item
        self.character = character

        self.update_tile_char()

    def remove_character(self):
        self.character = None
        self.update_tile_char()

    def add_character(self, character):
        self.character = character
        self.update_tile_char()

    def update_tile_char(self):
        if isinstance(self.character, Warrior): self.tile_char = '⚔️ '
        elif isinstance(self.character, Mage): self.tile_char = '🧝'
        elif isinstance(self.character, EvilWizard): self.tile_char = '🧙'
        else: self.tile_char = ' •'

# Map class manages a list of MapTile objects
class Map:
    def __init__(self):
        self.map_tiles = []


    # Creates and prints the map with the characters. Each map tile's coordinate is stored as the index in the 2D string    
    def createMap(self, hero, evil_wizard):
        spaces = '  '

        # Makes sure the two characters are not on the same tile
        while hero.isPositionEqual(evil_wizard.getx(), evil_wizard.gety):
            hero.setPosition(random.randint(0, 29), random.randint(0, 29))

        # Print the spaces to account for y coordinate numbers
        print('\n\n   ', end='')

        # Prints the x coordinate numbers
        for x in range(30):
            if x >= 10: spaces = ' '
            print(f"{x}", end=spaces)
    
        spaces = ' '
        # Nested for loops to print out the map (30 x 30 tiles) and store in a 2D list in coordinate form
        for y in range(30):
            self.map_tiles.append([])
            if y >= 10: spaces = ''
            print(f'\n{y}', end=spaces)

            for x in range(30):
                if hero.isPositionEqual(y, x):
                    self.map_tiles[y].append(MapTile(x, y, hero))

                elif evil_wizard.isPositionEqual(y, x):
                    self.map_tiles[y].append(MapTile(x, y, evil_wizard))

                else:
                    self.map_tiles[y].append(MapTile(x, y))

                # Be CAREFUL! The y coordinate goes first
                print(f"{self.map_tiles[y][x].tile_char} ", end='')
        print("\n\n")

    # Only Prints the map
    def printMap(self):
        spaces = '  '
        # Print the spaces to account for y coordinate numbers
        print('\n\n   ', end='')

        # Prints the x coordinate numbers
        for x in range(30):
            if x >= 10: spaces = ' '
            print(f"{x}", end=spaces)
    
        spaces = ' '
        # Nested for loops to print out the map (30 x 30 tiles) and store in a 2D list in coordinate form
        for y in range(30):
            if y >= 10: spaces = ''
            print(f'\n{y}', end=spaces)

            for x in range(30):
                # Be CAREFUL! The y coordinate goes first
                print(f"{self.map_tiles[y][x].tile_char} ", end='')
        print("\n\n")


# Base Character class
class Character:
    def __init__(self, name, health, attack_power, weapon, movement = 6):
        self.name = name
        self.health = health
        self.attack_power = attack_power
        self.weapon = weapon
        self.movement = movement
        self.max_health = health  # Store the original health for maximum limit
        self.max_movement = movement # Store the original movement to allow for a reset
        self.__y = random.randint(0, 29)
        self.__x = random.randint(0, 29)
        self.backpack = []
        self.right_hand = None # Stores what left hand is holding
        self.leftHand = None # Stores what right hand is holding

    def attack(self, opponent):
        self.weapon.attack(self, opponent)

        
    # Restores 5 health up to the maximum
    def heal(self):
        self.health += 5
        if self.health > self.max_health:
            self.health = self.max_health


    # Move function that moves the character from one MapTile object to another within the characters max movement
    def move(self, map: Map):

        while True:
            # Finds only the coordinates separated by anything
            newTile = re.search(r'(?P<x>\d+)[\D]*(?P<y>\d+)', input("Enter the coordinate pair you would like to move to: "))

            x = int(newTile.group('x'))
            y = int(newTile.group('y'))

            # Finds the distance of the movement and rounds it to the nearest int
            distance = round(math.hypot(x - self.__x, y - self.__y))

            if x not in range(0, 30) and y not in range(0, 30):
                print("Coordinates not in range! Please enter numbers in range 0-29.")

            elif x not in range(0, 30):
                print("x coordinate not in range! Please enter numbers in range 0-29.")

            elif y not in range(0, 30):
                print("y coordinate not in range! Please enter numbers in range 0-29.")
            
            elif distance > self.movement:
                print(f"You tried to move {distance} spaces, but your max movement is {self.movement} spaces. PLease enter a coordinate in range.")

            # Alters the correct MapTile objects to complete the movement
            elif map.map_tiles[y][x].character == None:
                map.map_tiles[self.__y][self.__x].remove_character()
                map.map_tiles[y][x].add_character(self)
                self.__x = x
                self.__y = y
                self.movement -= distance
                break

            else:
                print("Cannot move onto another character! Please enter new coordinates!")

        map.printMap()

    # TODO: ADD OTHER STATS
    def display_stats(self):
        print(f"{self.name}'s Stats - Health: {self.health}/{self.max_health}, Attack Power: {self.attack_power}")

    # Checks if the coordinates are equal to another set
    def isPositionEqual(self, y, x):
        if self.__y == y and self.__x == x:
            return True
        else:
            return False
        
    def gety(self):
        return self.__y
    
    def getx(self):
        return self.__x
    
    def setPosition(self, y, x):
        self.__y == y
        self.__x == x

class AreaOfEffect:

    # Checks if an attacker is in melee range to a defender
    def isMelee(self, attacker: Character, defender: Character):
        if attacker.getx() == defender.getx() - 1 or attacker.getx() == defender.getx() + 1 or attacker.gety() == defender.gety() - 1 or attacker.gety() == defender.gety() + 1:
            return True
        else:
            return False
        
    def inRange(self, range, attacker: Character, defender: Character):
        distance = round(math.hypot(attacker.getx() - defender.getx(), attacker.gety() - defender.gety()))

        if distance <= range:
            return True
        else:
            return False
        
class Weapon:
    aof = AreaOfEffect()
    @abstractmethod
    def attack(self, attacker: Character, defender: Character):
        pass

    @abstractmethod
    def __str__(self):
        return "<Weapon name>"
    
    def assign_damage(self, attacker: Character, defender: Character, AP_modifier=1, bonus_damage=0):
        attack_power = attacker.attack_power * AP_modifier

        # Randomizes the damage with the attack power as a modifier
        # 0-200 because that makes the attack_power the average damage
        damage = round(random.randint(0, 200) * (attack_power*0.01)) + bonus_damage
        defender.health -= damage
        print(f"{attacker.name} attacks {defender.name} with {attacker.weapon} for {damage} damage!") 

class Longsword(Weapon):
    # Attributes
    ap_modifier = 1.3   # This is how the weapon affects the attack and is unique to each weapon

    def attack(self, attacker: Character, defender: Character):
        if self.aof.isMelee(attacker, defender): 

            self.assign_damage(attacker, defender, AP_modifier=self.ap_modifier)
        else:
            print(f"{defender.name} is out of range!")

    def __str__(self):
         return "Longsword"
    
    # TODO: Print stats method

class ElectroWand(Weapon):
    # Attributes
    bonus_damage = 20
    range = 14

    def attack(self, attacker: Character, defender: Character):
        if self.aof.inRange(range, attacker, defender):

            self.assign_damage(attacker, defender, bonus_damage=self.bonus_damage)
        else:
            print(f"{defender.name} is out of range!")

    def __str__(self):
         return "Longsword"
    


# Warrior class (inherits from Character)
class Warrior(Character):
    def __init__(self, name):
        super().__init__(name, health=140, attack_power=25, weapon=Longsword(), movement=100)  # Boost health and attack power

    # Add your power attack method here


# Mage class (inherits from Character)
class Mage(Character):
    def __init__(self, name):
        super().__init__(name, health=100, attack_power=35, weapon=Longsword(), movement=5)  # Boost attack power

    # Add your cast spell method here


# EvilWizard class (inherits from Character)
class EvilWizard(Character):
    def __init__(self, name):
        super().__init__(name, health=150, attack_power=15, weapon="Lightning Bolt", movement=7)  # Lower attack power
    
    # Evil Wizard's special ability: it can regenerate health
    def regenerate(self):
        self.health += 5  # Lower regeneration amount
        print(f"{self.name} regenerates 5 health! Current health: {self.health}")                                      

# Function to create player character based on user input
def create_character():
    print("Choose your character class:")
    print("1. Warrior")
    print("2. Mage")
    print("3. Archer")  # Add Archer
    print("4. Paladin")  # Add Paladin
    
    class_choice = input("Enter the number of your class choice: ")
    name = input("Enter your character's name: ")

    if class_choice == '1':
        return Warrior(name)
    elif class_choice == '2':
        return Mage(name)
    elif class_choice == '3':
        # Add Archer class here
        pass
    elif class_choice == '4':
        # Add Paladin class here
        pass
    else:
        print("Invalid choice. Defaulting to Warrior.")
        return Warrior(name)



# Battle function with user menu for actions
def battle(player, wizard):
    while wizard.health > 0 and player.health > 0:
        print("\n--- Your Turn ---")
        print("1. Attack")
        print("2. Use Special Ability")
        print("3. Heal")
        print("4. View Stats")
        
        choice = input("Choose an action: ")

        if choice == '1':
            player.attack(wizard)
        elif choice == '2':
            # Call the special ability here
            pass  # Implement this
        elif choice == '3':
            player.heal()
        elif choice == '4':
            player.display_stats()
        else:
            print("Invalid choice, try again.")
            continue

        # Evil Wizard's turn to attack and regenerate
        if wizard.health > 0:
            wizard.regenerate()
            wizard.attack(player)

        if player.health <= 0:
            print(f"{player.name} has been defeated!")
            break

    if wizard.health <= 0:
        print(f"The wizard {wizard.name} has been defeated by {player.name}!")

# Main function to handle the flow of the game
def main():
  map = Map()

  warrior = Warrior('Aragorn')
  evil_wizard = EvilWizard('Merlock')

  map.createMap(warrior, evil_wizard)

  warrior.move(map)

  warrior.attack(evil_wizard)
    # Character creation phase
   # player = create_character()

    # Evil Wizard is created
  #  wizard = EvilWizard("The Dark Wizard")

    # Start the battle
  #  battle(player, wizard)

  go = input()

  if go == 'i': warrior.move(map)
      

if __name__ == "__main__":
    main()